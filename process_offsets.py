#!/usr/bin/env python
u"""
process_offsets.py
Written by Enrico Ciraci' (11/2022)

Process dense offsets generated by AMPCOR.
- Read offsets and stack them in a single file -> r_off_sar.py
- Create offsets for interferogram -> c_off4intf.py

usage: process_offsets.py [-h] [--directory DIRECTORY]
            [--fill] [--rm_ramp] [--smooth] reference secondary

Process dense offsets generated by AMPCOR.

positional arguments:
  reference             Reference SLCs.
  secondary             Secondary SLCs.

options:
  -h, --help            show this help message and exit
  --directory DIRECTORY, -D DIRECTORY
                        Data directory.
  --fill, -F            Fill gaps in offsets.
  --fill, -F            Fill gaps in offsets.
  --smooth, -S          Smooth offsets.
  --nrlks NRLKS         Number of looks Range.
  --nazlks NAZLKS       Number of looks Azimuth.

PYTHON DEPENDENCIES:
    argparse: Parser for command-line options, arguments and sub-commands
           https://docs.python.org/3/library/argparse.html
    numpy: The fundamental package for scientific computing with Python
          https://numpy.org/
          https://tqdm.github.io/
    datetime: Basic date and time types
           https://docs.python.org/3/library/datetime.html#module-datetime

    py_gamma: GAMMA's Python integration with the py_gamma module

"""
# - Python Dependencies
from __future__ import print_function
import os
import argparse
import datetime
# - ST_Release dependencies
from st_release.r_off_sar import r_off_sar
from st_release.c_off4intf import c_off4intf
from utils.make_dir import make_dir


def main() -> None:
    parser = argparse.ArgumentParser(
        description="Process dense offsets generated by AMPCOR."
    )
    # - Reference Single Look Complex Image
    parser.add_argument('reference', type=str,
                        help='Reference SLCs.')
    # - Secondary Single Look Complex Image
    parser.add_argument('secondary', type=str,
                        help='Secondary SLCs.')
    # - Data Directory
    parser.add_argument('--directory', '-D',
                        help='Data directory.',
                        default=os.getcwd())
    # - Fill gaps in offsets
    parser.add_argument('--fill', '-F', action='store_true',
                        help='Fill gaps in offsets.')
    # - Smooth offsets
    parser.add_argument('--smooth', '-S', action='store_true',
                        help='Smooth offsets.')
    # - Number of Looks in Range
    parser.add_argument('--nrlks', type=int, default=None,
                        help='Number of looks Range.')
    # - Number of Looks in Azimuth
    parser.add_argument('--nazlks', type=int, default=None,
                        help='Number of looks Azimuth.')
    args = parser.parse_args()

    # - Reference and Secondary SLCs
    ref_slc = args.reference
    sec_slc = args.secondary

    # - Directory containing the SLCs
    data_dir = args.directory

    # - Process offsets - Stack offset files
    r_off_sar(data_dir, ref_slc, sec_slc)

    # - Process offsets for Interferogram
    c_off4intf(data_dir, ref_slc, sec_slc,
               range_spacing=30, azimuth_spacing=30,
               filter_strategy=2, smooth=args.smooth,
               fill=args.fill, nrlks=args.nrlks, nazlks=args.nazlks)

    # - create Save directory
    make_dir(data_dir, 'Save')


# - run main program
if __name__ == '__main__':
    start_time = datetime.datetime.now()
    main()
    end_time = datetime.datetime.now()
    print(f"# - Computation Time: {end_time - start_time}")
